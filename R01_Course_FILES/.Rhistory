detach("package:datasets", unload = TRUE)  # For base
# Clear plots
dev.off()  # But only if there IS a plot
# Clear console
cat("\014")  # ctrl+L
m2 <- matrix(c("a", "b",
"c", "d"),
nrow = 2,
byrow = T)
m2
m2 <- matrix(c("a", "b",
"c", "d"),
nrow = 2,
bycol = T)
m2 <- matrix(c("a", "b",
"c", "d"),
nrow = 2,
bycolumn = T)
m2 <- matrix(c("a", "b",
"c", "d"),
ncol = 2,
bycol = T)
m2 <- matrix(c("a", "b",
"c", "d"),
ncol = 2,
bycolumn = T)
m2 <- matrix(c("a", "b",
"c", "d"),
ncol = 2)
m2
m1 <- matrix(c(T, T, F, F, T, F), nrow = 2)
m1
# Give data, then dimemensions (rows, columns, tables)
a1 <- array(c( 1:24), c(4, 3, 2))
a1
m1 <- matrix(c(T, T, F, F, T, F), nrow = 2)
m1
# Give data, then dimemensions (rows, columns, tables)
a1 <- array(c( 1:24))
a1
v1 <- c(1, 2, 3, 4, 5)
v1
# Give data, then dimemensions (rows, columns, tables)
a1 <- array(c( 1:24), c(4, 3, 2))
a1
# Give data, then dimemensions (rows, columns, tables)
a1 <- array(c( 1:12), c(4, 3, 1))
a1
# Assigns number 0 through 10 to x1
x1 <- 0:10
x1
# Descending order
x2 <- 10:0
x2
?seq  # R help on seq
# Ascending values (duplicates 1:10)
(x3 <- seq(10))
# Assigns number 0 through 10 to x1
(x1 <- 0:10)
# Ascending values (duplicates 1:10)
(x3 <- seq(10))
# Specify change in values
(x4 <- seq(30, 0, by = -3))
(x10 <- seq(0, 30, by = 3))
?rep  # R help on rep
x7 <- rep(TRUE, 5)
2
3
x7
x7 <- rep(x6, 5)
x6 <- scan()  # After running this command, go to console
x7 <- rep(x6, 5)
x7
# CSV
rio_csv <- import("~/Desktop/mbb.csv")
library(datasets)  # Load base packages manually
# Installs pacman ("package manager") if needed
if (!require("pacman")) install.packages("pacman")
# Use pacman to load add-on packages as desired
pacman::p_load(pacman, rio)
# CSV
rio_csv <- import("C:\WORK\PROGRAM\DATA SCIENCE WITH R\R01_Course_FILES\R01_5_4_ImportingData_Datasets/mbb.csv")
# CSV
rio_csv <- import("C:/WORK/PROGRAM/DATA SCIENCE WITH R/R01_Course_FILES/R01_5_4_ImportingData_Datasets/mbb.csv")
head(rio_csv)
# TXT
rio_txt <- import("C:/WORK/PROGRAM/DATA SCIENCE WITH R/R01_Course_FILES/R01_5_4_ImportingData_Datasets/mbb.txt")
head(rio_txt)
# Excel XLSX
rio_xlsx <- import("C:/WORK/PROGRAM/DATA SCIENCE WITH R/R01_Course_FILES/R01_5_4_ImportingData_Datasets/mbb.xlsx")
head(rio_xlsx)
?View
View(rio_csv)
library(datasets)  # Load base packages manually
# Installs pacman ("package manager") if needed
if (!require("pacman")) install.packages("pacman")
# Use pacman to load add-on packages as desired
pacman::p_load(pacman, tidyverse)
?mtcars
head(mtcars)
cars <- mtcars[, c(1:4)]  # Select variables
head(cars)
cars <- mtcars[20, c(1:4)]  # Select variables
cars <- mtcars[4, c(1:4)]  # Select variables
head(cars)
cars <- mtcars[0:4, c(1:4)]  # Select variables
head(cars)
cars <- mtcars[0:20, c(1:4)]  # Select variables
head(cars)
view(cars)
head(cars)
# Save hierarchical clustering to "hc." This codes uses
# pipes from dplyr.
hc <- cars   %>%  # Get cars data
dist   %>%  # Compute distance/dissimilarity matrix
hclust      # Computer hierarchical clusters
plot(hc)          # Plot dendrogram
# For entire data frame ####################################
pc <- prcomp(cars)   # Sets unit variance (helpful)
# Get summary stats
summary(pc)
# For entire data frame ####################################
pc <- prcomp(cars)   # Sets unit variance (helpful)
# Get summary stats
summary(pc)
# For entire data frame ####################################
pc <- prcomp(cars)   # Sets unit variance (helpful)
# Get summary stats
summary(pc)
# Screeplot for number of components
plot(pc)
# For entire data frame ####################################
pc <- prcomp(cars,
center = TRUE,  # Centers means to 0 (optional)
scale = TRUE)   # Sets unit variance (helpful)
# Get summary stats
summary(pc)
# Screeplot for number of components
plot(pc)
pc <- prcomp(~ mpg + cyl + disp + hp + wt + qsec + am +
gear + carb,
data = mtcars,
center = TRUE,
scale = TRUE)
# Get summary stats
summary(pc)
# Screeplot for number of components
plot(pc)
pc <- prcomp(~ mpg + cyl + disp + hp + wt + qsec + am +
gear + carb,
data = mtcars)
# Get summary stats
summary(pc)
# Screeplot for number of components
plot(pc)
pc <- prcomp(~ mpg + cyl + disp + hp + wt + qsec + am +
gear + carb,
data = mtcars,
center = TRUE,
scale = TRUE)
# Get summary stats
summary(pc)
# Screeplot for number of components
plot(pc)
library(datasets)  # Load base packages manually
# Installs pacman ("package manager") if needed
if (!require("pacman")) install.packages("pacman")
# Use pacman to load add-on packages as desired
pacman::p_load(pacman, tidyverse)
head(mtcars)
pc <- prcomp(~ mpg + cyl + hp + gear,
data = mtcars,
center = TRUE,
scale = TRUE)
# Get summary stats
summary(pc)
# Screeplot for number of components
plot(pc)
# Get standard deviations and rotation
pc
# Get summary stats
summary(pc)
# Screeplot for number of components
plot(pc)
# Biplot of first two components
biplot(pc)
head(mtcars)
cars <- mtcars[1:10, c(1:4)]  # Select variables
head(cars)
# For entire data frame ####################################
pc <- prcomp(cars,
center = TRUE,  # Centers means to 0 (optional)
scale = TRUE)   # Sets unit variance (helpful)
# Get summary stats
summary(pc)
# Screeplot for number of components
plot(pc)
# Biplot of first two components
biplot(pc)
# Get summary stats
summary(pc)
# Screeplot for number of components
plot(pc)
# Biplot of first two components
biplot(pc)
hist(iris$Sepal.Length)
summary(iris$Species)       # Categorical variable
summary(iris$Sepal.Length)  # Quantitative variable
summary(iris)               # Entire data frame
# Versicolor
hist(iris$Petal.Length[iris$Species == "versicolor"],
main = "Petal Length: Versicolor")
# Format: data[rows, columns]
# Leave rows or columns blank to select all
i.setosa <- iris[iris$Species == "setosa", ]
head(i.setosa)
# Format: data[rows, columns]
# Leave rows or columns blank to select all
i.setosa <- iris[iris$Species == "setosa",1:4 ]
head(i.setosa)
# Format: data[rows, columns]
# Leave rows or columns blank to select all
i.setosa <- iris[1:4,iris$Species == "setosa", ]
head(i.setosa)
# Format: data[rows, columns]
# Leave rows or columns blank to select all
i.setosa <- iris[1:4,iris$Species == "setosa" ]
# Give data, then dimemensions (rows, columns, tables)
a1 <- array(c( 1:24))
a1
, c(4, 3, 2)
, c(4, 3, 2)
# Give data, then dimemensions (rows, columns, tables)
a1 <- array(c( 1:24), c(4, 3, 2))
a1
plot(reg1)
library(datasets)  # Load base packages manually
# Installs pacman ("package manager") if needed
if (!require("pacman")) install.packages("pacman")
# Use pacman to load add-on packages as desired
pacman::p_load(pacman, caret, lars, tidyverse)
?USJudgeRatings
head(USJudgeRatings)
# Define variable groups
x <- as.matrix(data[, -12])
# Define variable groups
(x <- as.matrix(data[, -12]))
# Define variable groups
x <- as.matrix(data[, -12])
# Define variable groups
x <- as.matrix(data[, -12]
head(x)
# Define variable groups
x <- as.matrix(data[, -12]
library(datasets)  # Load base packages manually
# Installs pacman ("package manager") if needed
if (!require("pacman")) install.packages("pacman")
# Use pacman to load add-on packages as desired
pacman::p_load(pacman, caret, lars, tidyverse)
?USJudgeRatings
head(USJudgeRatings)
data <- USJudgeRatings
# Define variable groups
y <- data[, 12]
# Define variable groups
x <- as.matrix(data[, -12]
head(USJudgeRatings)
# Use pacman to load add-on packages as desired
pacman::p_load(pacman, caret, lars, tidyverse)
?USJudgeRatings
head(USJudgeRatings)
data <- USJudgeRatings
# Define variable groups
# Define variable groups
x <- as.matrix(data[, -12]
?USJudgeRatings
head(USJudgeRatings)
library(datasets)  # Load base packages manually
# Installs pacman ("package manager") if needed
if (!require("pacman")) install.packages("pacman")
# Use pacman to load add-on packages as desired
pacman::p_load(pacman, caret, lars, tidyverse)
?USJudgeRatings
head(USJudgeRatings)
data <- USJudgeRatings
x <- as.matrix(data[, -12])
y <- data[, 12]
# Using variable groups
reg1 <- lm(y ~ x)
# Results
reg1           # Coefficients only
plot(reg1)
summary(reg1)  # Inferential tests
library(datasets)  # Load base packages manually
# Installs pacman ("package manager") if needed
if (!require("pacman")) install.packages("pacman")
# Use pacman to load add-on packages as desired
pacman::p_load(pacman, caret, lars, tidyverse)
?USJudgeRatings
head(USJudgeRatings)
data <- USJudgeRatings
x <- as.matrix(data[, 1])
y <- data[, 12]
x <- data[, 1]
y <- data[, 12]
# Using variable groups
reg1 <- lm(y ~ x)
# Results
reg1           # Coefficients only
summary(reg1)  # Inferential tests
plot(reg1)
library(datasets)  # Load base packages manually
# Installs pacman ("package manager") if needed
if (!require("pacman")) install.packages("pacman")
# Use pacman to load add-on packages as desired
pacman::p_load(pacman, caret, lars, tidyverse)
x <- c(5.1, 5.5, 5.8, 6.1, 6.4, 6.7, 6.4, 6.1, 5.10, 5.7)
y <- c(63, 66, 69, 72, 75, 78, 75, 72, 69, 66)
# Using variable groups
reg1 <- lm(y ~ x)
summary(reg1)  # Inferential tests
a <- data.frame(x=6.3)
result <- predict(reg1,a)
print(result)
plot(reg1)
library(datasets)  # Load/unload base packages manually
head(iris)
plot(iris$Species, iris$Petal.Width)  # Cat x quant
plot(iris$Species)  # Categorical variable
plot(iris$Petal.Length)  # Quantitative variable
library(datasets)
?iris
head(iris)
hist(iris$Sepal.Length)
hist(iris$Petal.Length)
m1 <- matrix(c(T, T, F, F, T, F), nrow = 2)
m1
m2 <- matrix(c("a", "b",
"c", "d"),
nrow = 2,
byrow = T)
m2
# Give data, then dimemensions (rows, columns, tables)
a1 <- array(c( 1:24), c(4, 3, 2))
a1
b=2
b
x2=0:10
x2
library(datasets)  # Load base packages manually
# Installs pacman ("package manager") if needed
if (!require("pacman")) install.packages("pacman")
# Use pacman to load add-on packages as desired
pacman::p_load(pacman, tidyverse)
?mtcars
head(mtcars)
cars <- mtcars[0:20, c(1:4)]  # Select variables
head(cars)
# Save hierarchical clustering to "hc." This codes uses
# pipes from dplyr.
hc <- cars   %>%  # Get cars data
dist   %>%  # Compute distance/dissimilarity matrix
hclust      # Computer hierarchical clusters
plot(hc)          # Plot dendrogram
library(datasets)  # Load base packages manually
# Installs pacman ("package manager") if needed
if (!require("pacman")) install.packages("pacman")
# Use pacman to load add-on packages as desired
pacman::p_load(pacman, tidyverse)
head(mtcars)
cars <- mtcars[1:10, c(1:4)]  # Select variables
head(cars)
# For entire data frame ####################################
pc <- prcomp(cars,
center = TRUE,  # Centers means to 0 (optional)
scale = TRUE)   # Sets unit variance (helpful)
# Get summary stats
summary(pc)
# Screeplot for number of components
plot(pc)
library(datasets)  # Load built-in datasets
head(iris)         # Show the first six lines of iris data
summary(iris)      # Summary statistics for iris data
plot(iris)         # Scatterplot matrix for iris data
# Clear packages
detach("package:datasets", unload = TRUE)  # For base
# Clear plots
dev.off()  # But only if there IS a plot
library(datasets)  # Load built-in datasets
head(iris)         # Show the first six lines of iris data
summary(iris)      # Summary statistics for iris data
plot(iris)         # Scatterplot matrix for iris data
# Clear packages
detach("package:datasets", unload = TRUE)  # For base
install.packages("pacman")
# I recommend "pacman" for managing add-on packages. It will
# install packages, if needed, and then load the packages.
install.packages("pacman")
# Then load the package by using either of the following:
require(pacman)  # Gives a confirmation message.
library(pacman)  # No message.
# Or, by using "pacman::p_load" you can use the p_load
# function from pacman without actually loading pacman.
# These are packages I load every time.
pacman::p_load(pacman, dplyr, GGally, ggplot2, ggthemes,
ggvis, httr, lubridate, plotly, rio, rmarkdown, shiny,
stringr, tidyr)
library(datasets)  # Load/unload base packages manually
# Clear packages
p_unload(dplyr, tidyr, stringr) # Clear specific packages
p_unload(all)  # Easier: clears all add-ons
detach("package:datasets", unload = TRUE)  # For base
# Clear console
cat("\014")  # ctrl+L
# Clear mind :)
# Clear mind :)
library(datasets)  # Load base packages manually
# Installs pacman ("package manager") if needed
if (!require("pacman")) install.packages("pacman")
# Use pacman to load add-on packages as desired
pacman::p_load(pacman, tidyverse)
?mtcars
head(mtcars)
cars <- mtcars[0:20, c(1:4)]  # Select variables
head(cars)
# Save hierarchical clustering to "hc." This codes uses
# pipes from dplyr.
hc <- cars   %>%  # Get cars data
dist   %>%  # Compute distance/dissimilarity matrix
hclust      # Computer hierarchical clusters
plot(hc)          # Plot dendrogram
rect.hclust(hc, k = 2, border = "gray")
rect.hclust(hc, k = 3, border = "blue")
rect.hclust(hc, k = 4, border = "green4")
rect.hclust(hc, k = 5, border = "darkred")
# Clear environment
rm(list = ls())
# Clear packages
p_unload(all)  # Remove all add-ons
detach("package:datasets", unload = TRUE)  # For base
# Clear plots
dev.off()  # But only if there IS a plot
# Clear console
cat("\014")  # ctrl+L
library(datasets)  # Load base packages manually
# Installs pacman ("package manager") if needed
if (!require("pacman")) install.packages("pacman")
# Use pacman to load add-on packages as desired
pacman::p_load(pacman, tidyverse)
head(mtcars)
cars <- mtcars[1:10, c(1:4)]  # Select variables
head(cars)
# For entire data frame ####################################
pc <- prcomp(cars,
center = TRUE,  # Centers means to 0 (optional)
scale = TRUE)   # Sets unit variance (helpful)
pc <- prcomp(~ mpg + cyl + hp + gear,
data = mtcars,
center = TRUE,
scale = TRUE)
# Get summary stats
summary(pc)
# Screeplot for number of components
plot(pc)
# Get standard deviations and rotation
pc
# See how cases load on PCs
predict(pc) %>% round(2)
# Biplot of first two components
biplot(pc)
# Clear environment
rm(list = ls())
# Clear packages
p_unload(all)  # Remove all add-ons
detach("package:datasets", unload = TRUE)  # For base
# Use pacman to load add-on packages as desired
pacman::p_load(pacman, tidyverse)
head(mtcars)
S
library(datasets)  # Load base packages manually
# Use pacman to load add-on packages as desired
pacman::p_load(pacman, tidyverse)
head(mtcars)
cars <- mtcars[1:10, c(1:4)]  # Select variables
head(cars)
# For entire data frame ####################################
pc <- prcomp(cars,
center = TRUE,  # Centers means to 0 (optional)
scale = TRUE)   # Sets unit variance (helpful)
pc <- prcomp(~ mpg + cyl + hp + gear,
data = mtcars,
center = TRUE,
scale = TRUE)
# Get summary stats
summary(pc)
# Screeplot for number of components
plot(pc)
# Get standard deviations and rotation
pc
# See how cases load on PCs
predict(pc) %>% round(2)
# Biplot of first two components
biplot(pc)
# Clear environment
rm(list = ls())
# Clear packages
p_unload(all)  # Remove all add-ons
detach("package:datasets", unload = TRUE)  # For base
# Clear plots
dev.off()  # But only if there IS a plot
# Clear console
cat("\014")  # ctrl+L
